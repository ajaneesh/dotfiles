#+PROPERTY: header-args  :tangle yes

* start server process

#+begin_src emacs-lisp
  
(server-start)

#+end_src

* startup performance

#+begin_src emacs-lisp

;; -*- lexical-binding: t; -*-

;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s seconds with %d garbage collections."
                     (emacs-init-time "%.2f")
                     gcs-done)))

;; Silence compiler warnings as they can be pretty disruptive
(setq native-comp-async-report-warnings-errors nil)

;; Set the right directory to store the native comp cache
(add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))
 
#+end_src

* load path for our custom elisp package

#+begin_src emacs-lisp

;; Add my library path to load-path
(push "~/.config/emacs/lisp" load-path)
(push "~/dotfiles/modules/common/emacs/lib" load-path)

#+end_src

* load modus theme
#+begin_src emacs-lisp
  ;; Configure the Modus Themes' appearance
  (use-package modus-themes
    :ensure t
    :config
    (setq modus-themes-mode-line '(accented borderless)
        modus-themes-bold-constructs t
        modus-themes-italic-constructs t
        modus-themes-fringes 'subtle
        modus-themes-tabs-accented t
        modus-themes-paren-match '(bold intense)
        modus-themes-prompts '(bold intense)
        modus-themes-completions '((matches . (extrabold underline))
          (selection . (semibold italic)))
        modus-themes-org-blocks 'tinted-background
        modus-themes-scale-headings t
        modus-themes-region '(bg-only)
        modus-themes-headings
        '((1 . (rainbow overline background 1.4))
          (2 . (rainbow background 1.3))
          (3 . (rainbow bold 1.2))
          (t . (semilight 1.1))))
    
  ;; Load the dark theme by default
  (load-theme 'modus-vivendi t ))
#+end_src
* Get evil-mode up and running ASAP so that we dont have to struggle with emacs editing controls
#+begin_src emacs-lisp

  (use-package undo-tree
    :ensure t
    :config
    (setq undo-tree-auto-save-history nil)
    (global-undo-tree-mode 1))

    
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)

    (straight-use-package 'evil)
    :config
    (evil-mode 1)

    ;; Set Emacs state modes
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode))

    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Clear the binding of C-k so that it doesn't conflict with Corfu
    (define-key evil-insert-state-map (kbd "C-k") nil)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    ;; (unless dw/is-termux
    ;;   (defun dw/dont-arrow-me-bro ()
    ;;     (interactive)
    ;;     (message "Arrow keys are bad, you know?"))

    ;;   ;; Disable arrow keys in normal and visual modes
    ;;   (define-key evil-normal-state-map (kbd "<left>") 'dw/dont-arrow-me-bro)
    ;;   (define-key evil-normal-state-map (kbd "<right>") 'dw/dont-arrow-me-bro)
    ;;   (define-key evil-normal-state-map (kbd "<down>") 'dw/dont-arrow-me-bro)
    ;;   (define-key evil-normal-state-map (kbd "<up>") 'dw/dont-arrow-me-bro)
    ;;   (evil-global-set-key 'motion (kbd "<left>") 'dw/dont-arrow-me-bro)
    ;;   (evil-global-set-key 'motion (kbd "<right>") 'dw/dont-arrow-me-bro)
    ;;   (evil-global-set-key 'motion (kbd "<down>") 'dw/dont-arrow-me-bro)
    ;;   (evil-global-set-key 'motion (kbd "<up>") 'dw/dont-arrow-me-bro))

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  ;; (use-package evil-collection
  ;;  :ensure t
  ;;  :config
  ;;    (setq evil-collection-company-use-tng nil)
  ;;    (setq evil-collection-outline-bind-tab-p nil)
  ;;    (setq evil-collection-mode-list (remove 'lispy evil-collection-mode-list))
  ;;    (setq evil-collection-mode-list (remove 'org-present evil-collection-mode-list))
  ;;    (evil-collection-init))

#+end_src

* using straight.el for package management

#+begin_src emacs-lisp
(unless (featurep 'straight)
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage)))

;; Use straight.el for use-package expressions
(straight-use-package 'use-package)

#+end_src

* Get org templates, babel and tangle up and running
#+begin_src emacs-lisp

;; TODO: Mode this to another section
(setq-default fill-column 80)

(use-package org
  ;; :straight t
  :defer t
  :requires (org-tempo dw-org dw-workflow)
  :hook 'dw/org-mode-setup
  :config
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t
        org-src-fontify-natively t
        org-fontify-quote-and-verse-blocks t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 2
        org-hide-block-startup nil
        org-src-preserve-indentation nil
        org-startup-folded 'content
        org-cycle-separator-lines 2
        org-capture-bookmark nil)
  (org-indent-mode)
  (variable-pitch-mode 1)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq corfu-auto nil)
  (setq evil-auto-indent nil)
  (setq org-modules '(org-crypt org-habit org-bookmark org-eshell org-irc))

  (setq org-refile-targets '((nil :maxlevel . 1)
                             (org-agenda-files :maxlevel . 1)))

  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path t)

  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)

  (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t))) 

  (push '("conf-unix" . conf-unix) org-src-lang-modes))


;;(unless dw/is-termux

  (use-package org-superstar
    :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  ;;(setup (:pkg org-superstar)
  ;;  (:load-after org)
  ;;  (:hook-into org-mode)
  ;;  (:option org-superstar-remove-leading-stars t
  ;;           org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
;;)

;; Replace list hyphen with dot
;; (font-lock-add-keywords 'org-mode
;;                         '(("^ *\\([-]\\) "
;;                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

(use-package org-faces
  ;; Make sure org-indent face is available
  :requires (org-indent)
  :config
    ;; Increase the size of various headings
    (set-face-attribute 'org-document-title nil :font "Firacode Sans" :weight 'bold :height 1.3)
  
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Firacode Sans" :weight 'medium :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

    ;; Get rid of the background on column views
    (set-face-attribute 'org-column nil :background nil)
    (set-face-attribute 'org-column-title nil :background nil))

;; TODO: Others to consider
;; '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
;; '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
;; '(org-property-value ((t (:inherit fixed-pitch))) t)
;; '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
;; '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
;; '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
;; '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

  
;; This is needed as of Org 9.2
(use-package org-tempo
  :config
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
    (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
    (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("go" . "src go"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json")))

#+end_src
* useful key binding

#+begin_src emacs-lisp
;; ESC cancels all
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

# Initial setup and overall look and feel using modus and fonts

need to check if modus also does a good job with modeline
need a proper theme in orgmode so that code blocks and hierarchy stand out well.

* Buffer customizations (prot tips to ensure they open in specific windows)

* vertico, marginalia, orderless, project.el, treemacs, embark, consult
#+begin_src emacs-lisp
            ;; Enable vertico
            (use-package vertico
              :ensure t
              :custom
              ;; (vertico-scroll-margin 0) ;; Different scroll margin
              ;; (vertico-count 20) ;; Show more candidates
              (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
              (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
              :init
              (vertico-mode))

            ;; Persist history over Emacs restarts. Vertico sorts by history position.
            (use-package savehist
              :ensure t
              :init
              (savehist-mode))  
            ;; Enable rich annotations using the Marginalia package
          (use-package marginalia
            :ensure t
            ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
            ;; available in the *Completions* buffer, add it to the
            ;; `completion-list-mode-map'.
            :bind (:map minibuffer-local-map
                   ("M-A" . marginalia-cycle))

            ;; The :init section is always executed.
            :init

            ;; Marginalia must be activated in the :init section of use-package such that
            ;; the mode gets enabled right away. Note that this forces loading the
            ;; package.
            (marginalia-mode))

          ;; Example configuration for Consult
        (use-package consult
          :ensure t
          ;; Replace bindings. Lazily loaded by `use-package'.
          :bind (;; C-c bindings in `mode-specific-map'
                 ("C-c M-x" . consult-mode-command)
                 ("C-c h" . consult-history)
                 ("C-c k" . consult-kmacro)
                 ("C-c m" . consult-man)
                 ("C-c i" . consult-info)
                 ([remap Info-search] . consult-info)
                 ;; C-x bindings in `ctl-x-map'
                 ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
                 ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
                 ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
                 ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
                 ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
                 ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
                 ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
                 ;; Custom M-# bindings for fast register access
                 ("M-#" . consult-register-load)
                 ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
                 ("C-M-#" . consult-register)
                 ;; Other custom bindings
                 ("M-y" . consult-yank-pop)                ;; orig. yank-pop
                 ;; M-g bindings in `goto-map'
                 ("M-g e" . consult-compile-error)
                 ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
                 ("M-g g" . consult-goto-line)             ;; orig. goto-line
                 ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
                 ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
                 ("M-g m" . consult-mark)
                 ("M-g k" . consult-global-mark)
                 ("M-g i" . consult-imenu)
                 ("M-g I" . consult-imenu-multi)
                 ;; M-s bindings in `search-map'
                 ("M-s d" . consult-find)                  ;; Alternative: consult-fd
                 ("M-s c" . consult-locate)
                 ("M-s g" . consult-grep)
                 ("M-s G" . consult-git-grep)
                 ("M-s r" . consult-ripgrep)
                 ("M-s l" . consult-line)
                 ("M-s L" . consult-line-multi)
                 ("M-s k" . consult-keep-lines)
                 ("M-s u" . consult-focus-lines)
                 ;; Isearch integration
                 ("M-s e" . consult-isearch-history)
                 :map isearch-mode-map
                 ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
                 ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
                 ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
                 ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
                 ;; Minibuffer history
                 :map minibuffer-local-map
                 ("M-s" . consult-history)                 ;; orig. next-matching-history-element
                 ("M-r" . consult-history))                ;; orig. previous-matching-history-element

          ;; Enable automatic preview at point in the *Completions* buffer. This is
          ;; relevant when you use the default completion UI.
          :hook (completion-list-mode . consult-preview-at-point-mode)

          ;; The :init configuration is always executed (Not lazy)
          :init

          ;; Optionally configure the register formatting. This improves the register
          ;; preview for `consult-register', `consult-register-load',
          ;; `consult-register-store' and the Emacs built-ins.
          (setq register-preview-delay 0.5
                register-preview-function #'consult-register-format)

          ;; Optionally tweak the register preview window.
          ;; This adds thin lines, sorting and hides the mode line of the window.
          (advice-add #'register-preview :override #'consult-register-window)

          ;; Use Consult to select xref locations with preview
          (setq xref-show-xrefs-function #'consult-xref
                xref-show-definitions-function #'consult-xref)

          ;; Configure other variables and modes in the :config section,
          ;; after lazily loading the package.
          :config

          ;; Optionally configure preview. The default value
          ;; is 'any, such that any key triggers the preview.
          ;; (setq consult-preview-key 'any)
          ;; (setq consult-preview-key "M-.")
          ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
          ;; For some commands and buffer sources it is useful to configure the
          ;; :preview-key on a per-command basis using the `consult-customize' macro.
          (consult-customize
           consult-theme :preview-key '(:debounce 0.2 any)
           consult-ripgrep consult-git-grep consult-grep
           consult-bookmark consult-recent-file consult-xref
           consult--source-bookmark consult--source-file-register
           consult--source-recent-file consult--source-project-recent-file
           ;; :preview-key "M-."
           :preview-key '(:debounce 0.4 any))

          ;; Optionally configure the narrowing key.
          ;; Both < and C-+ work reasonably well.
          (setq consult-narrow-key "<") ;; "C-+"

          ;; Optionally make narrowing help available in the minibuffer.
          ;; You may want to use `embark-prefix-help-command' or which-key instead.
          ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
        )

    (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

      (use-package orderless
        :ensure t
        :custom
        (completion-styles '(orderless basic))
        (completion-category-defaults nil)
        (completion-category-overrides '((file (styles basic partial-completion)))))  

      (use-package corfu
        :ensure t
      ;; Optional customizations
        :custom
      ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
         (corfu-auto t)                 ;; Enable auto completion
      ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
         (corfu-quit-no-match 'separator)      ;; Never quit, even if there is no match
      ;; (corfu-preview-current nil)    ;; Disable current candidate preview
      ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
      ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches

      ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
      ;; :hook ((prog-mode . corfu-mode)
      ;;        (shell-mode . corfu-mode)
      ;;        (eshell-mode . corfu-mode))

      ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
      ;; be used globally (M-/).  See also the customization variable
      ;; `global-corfu-modes' to exclude certain modes.
      :init
      (global-corfu-mode))

      (use-package cape
        :ensure t
        ;; Bind prefix keymap providing all Cape commands under a mnemonic key.
        ;; Press C-c p ? to for help.
        :bind ("C-c p" . cape-prefix-map) ;; Alternative keys: M-p, M-+, ...
        ;; Alternatively bind Cape commands individually.
        ;; :bind (("C-c p d" . cape-dabbrev)
        ;;        ("C-c p h" . cape-history)
        ;;        ("C-c p f" . cape-file)
        ;;        ...)
        :init
        ;; Add to the global default value of `completion-at-point-functions' which is
        ;; used by `completion-at-point'.  The order of the functions matters, the
        ;; first function returning a result wins.  Note that the list of buffer-local
        ;; completion functions takes precedence over the global list.
        (add-hook 'completion-at-point-functions #'cape-dabbrev)
        (add-hook 'completion-at-point-functions #'cape-file)
        (add-hook 'completion-at-point-functions #'cape-elisp-block)
        ;; (add-hook 'completion-at-point-functions #'cape-history)
        ;; ...
    )

#+end_src

#+RESULTS:
: cape-prefix-map

These should help up start working with project folders.

* do we need acewindow to navigate easily between windows 

* install things necessary to quickly find files by name and by content like swiper, ripgrep et al. 

* magit to start working with Git.

* lsp mode and code completion using corfu

* debugging with dap-mode?

#+begin_src emacs-lisp

#+end_src

#+PROPERTY: header-args  :tangle yes

* start server process

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
  
(server-start)

#+end_src

* startup performance

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s seconds with %d garbage collections."
                       (emacs-init-time "%.2f")
                       gcs-done)))

  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors nil)

  ;; Set the right directory to store the native comp cache
  (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

#+end_src

* Setup package.el and Melpa

#+begin_src emacs-lisp

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                        ("org" . "https://orgmode.org/elpa/")
                        ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

#+end_src

* using straight.el for package management

#+begin_src emacs-lisp
  (unless (featurep 'straight)
    ;; Bootstrap straight.el
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)

#+end_src

* load path for our custom elisp package

#+begin_src emacs-lisp

;; Add my library path to load-path
(push "~/lib/elisp/" load-path)

#+end_src

* SSH Configuration

#+begin_src emacs-lisp

  (require 'ssh-tunnel-manager)
  
  ;; Optional: setup default keybindings
  (ssh-tunnel-setup-default-keybindings)


#+end_src

* Basic UI Configuration

#+begin_src emacs-lisp


  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  
#+end_src
* Font configuration

#+begin_src emacs-lisp

  ;;     ;; Set default fonts
  ;;     (set-face-attribute 'default nil
  ;;                         :family "Fira Code"
  ;;                         :height 120)

  ;;     ;; Ensure programming modes and code use fixed-pitch
  ;;     (set-face-attribute 'fixed-pitch nil 
  ;;                         :family "Fira Code"
  ;;                         :height 120)

  ;;     (set-face-attribute 'variable-pitch nil
  ;;                         :family "Cantarell"
  ;;                         :height 120)
  ;;   (use-package ligature
  ;;     :ensure t
  ;;     :config
  ;;     (ligature-set-ligatures 't '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
  ;;                                 "{-" "::" ":::" ":=" "!!" "!=" "!==" "-}" "--" "---" "-->"
  ;;                                 "->>" "->" "-<" "-<<" "-~" "#{" "#[" "##" "###" "####"
  ;;                                 "#(" "#?" "#_" "#_(" ".-" ".=" ".." "..<" "..." "?=")))
                                  
  ;;   ;; Ensure fixed-pitch in all programming modes
  ;;   (add-hook 'prog-mode-hook
  ;;             (lambda ()
  ;;               (mixed-pitch-mode -1)  ; Disable mixed-pitch-mode
  ;;               (variable-pitch-mode -1)  ; Ensure variable-pitch is off
  ;;               ))

  ;; ;; Configure mixed-pitch-mode
  ;; (use-package mixed-pitch
  ;;   :ensure t
  ;;   :hook (org-mode . mixed-pitch-mode)
  ;;   :config
  ;;   (setq mixed-pitch-set-height t)
  ;;   ;; Ensure these elements stay fixed-pitch in mixed-pitch-mode
  ;;   (setq mixed-pitch-fixed-pitch-faces
  ;;         '(org-block
  ;;           org-block-begin-line
  ;;           org-block-end-line
  ;;           org-code
  ;;           org-document-info-keyword
  ;;           org-meta-line
  ;;           org-property-value
  ;;           org-special-keyword
  ;;           org-table
  ;;           org-verbatim
  ;;           line-number
  ;;           line-number-current-line)))

#+end_src

* Modus Theme Configuration

#+begin_src emacs-lisp

  ;; Configure the Modus Themes' appearance
  (use-package modus-themes
      :ensure t
      :config
      (setq modus-themes-mode-line '(accented borderless)
            modus-themes-bold-constructs t
            modus-themes-italic-constructs t
            modus-themes-fringes 'subtle
            modus-themes-tabs-accented t
            modus-themes-paren-match '(bold intense)
            modus-themes-prompts '(bold intense)
            modus-themes-completions '((matches . (extrabold underline))
              (selection . (semibold italic)))
            modus-themes-org-blocks 'tinted-background
            modus-themes-scale-headings t
            modus-themes-region '(bg-only)
            modus-themes-headings
            '((1 . (rainbow overline background 1.2))
              (2 . (rainbow background 1.1))
              (3 . (rainbow bold 1.1))
              (t . (semilight 1.1))))

      ;; Load the dark theme by default
      (load-theme 'modus-vivendi t ))

#+end_src

* Get evil-mode up and running ASAP so that we dont have to struggle with emacs editing controls

#+begin_src emacs-lisp

  (use-package undo-tree
    :ensure t
    :config
    (setq undo-tree-auto-save-history nil)
    (global-undo-tree-mode 1))


  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)

    (straight-use-package 'evil)
    :config
    (evil-mode 1)

    ;; Set Emacs state modes
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode))

    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Clear the binding of C-k so that it doesn't conflict with Corfu
    (define-key evil-insert-state-map (kbd "C-k") nil)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

    (use-package evil-collection
	:after evil
	:ensure t
	:config
	(evil-collection-init))
#+end_src

* Get org templates, babel and tangle up and running

#+begin_src emacs-lisp

  ;; TODO: Mode this to another section
  (setq-default fill-column 80)

  ;; Org-mode specific settings
  (use-package org
    :ensure t
    :custom
    (org-hide-emphasis-markers t)
    (org-fontify-quote-and-verse-blocks t)
    (org-fontify-whole-heading-line t)
    (org-hide-leading-stars t)
    (org-pretty-entities t)
    (org-ellipsis "…")
    
    :config
    ;; Clear any existing face settings first
    (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-verbatim nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-special-keyword nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-meta-line nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
    
    ;; Set headings to use variable-pitch and scale properly
  ;;   (dolist (face '((org-level-1 . 1.3)
  ;;                   (org-level-2 . 1.2)
  ;;                   (org-level-3 . 1.1)
  ;;                   (org-level-4 . 1.0)
  ;;                   (org-level-5 . 1.0)
  ;;                   (org-level-6 . 1.0)
  ;;                   (org-level-7 . 1.0)
  ;;                   (org-level-8 . 1.0)))
  ;;     (set-face-attribute (car face) nil 
  ;;                       :inherit 'variable-pitch 
  ;;                       :height (* 120 (cdr face)))))

   (use-package org-superstar
    :ensure t
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

  ;; This is needed as of Org 9.2
  (use-package org-tempo
    :config
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
    (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
    (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("go" . "src go"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json")))

#+end_src

* useful key binding

#+begin_src emacs-lisp
;; ESC cancels all
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

# Initial setup and overall look and feel using modus and fonts

need to check if modus also does a good job with modeline
need a proper theme in orgmode so that code blocks and hierarchy stand out well.

* Buffer customizations (prot tips to ensure they open in specific windows)

* Project.el configuration
#+begin_src emacs-lisp

  ;; Project configuration
  (use-package project
    :ensure nil  ; built into Emacs
    :config
    ;; Custom project root finding function
    (defun my/project-try-deps-edn (dir)
      "Return project instance if DIR has deps.edn file."
      (let ((proj-file (locate-dominating-file dir "deps.edn")))
        (if proj-file
            (cons 'deps-edn proj-file)
          nil)))
    
    (defun my/project-try-project-clj (dir)
      "Return project instance if DIR has project.clj file."
      (let ((proj-file (locate-dominating-file dir "project.clj")))
        (if proj-file
            (cons 'lein proj-file)
          nil)))
    
    ;; Define how to get root for deps.edn projects
    (cl-defmethod project-root ((project (head deps-edn)))
      (cdr project))
    
    ;; Add Clojure project detection
    (add-hook 'project-find-functions #'my/project-try-deps-edn)
    (add-hook 'project-find-functions #'my/project-try-project-clj))
    
      ;; Convenient keybindings for project.el
      (global-set-key (kbd "C-c p f") #'project-find-file)
      (global-set-key (kbd "C-c p d") #'project-find-dir)
      (global-set-key (kbd "C-c p b") #'project-switch-to-buffer)
      (global-set-key (kbd "C-c p p") #'project-switch-project)
      (global-set-key (kbd "C-c p s") #'project-shell)
      (global-set-key (kbd "C-c p g") #'project-find-regexp)
      (global-set-key (kbd "C-c p e") #'project-eshell)

  (setq project-additional-project-dirs 
      '("~/automation_scripts"
        ))

#+end_src
* vertico configuration

#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :ensure t
    :custom
    ;; (vertico-scroll-margin 0) ;; Different scroll margin
    ;; (vertico-count 20) ;; Show more candidates
    (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    :init
    (vertico-mode))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))  
#+end_src

* Marginalia configuration

#+begin_src emacs-lisp

  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :ensure t
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src

* Consult configuration

#+begin_src emacs-lisp

  ;; Example configuration for Consult
  (use-package consult
    :ensure t
    ;; Replace bindings. Lazily loaded by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
    )
#+end_src

* Embark configuration

#+begin_src emacs-lisp

  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
  
#+end_src

* Orderless configuration

#+begin_src emacs-lisp

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles basic partial-completion)))))  
#+end_src

* Cape Configuration

#+begin_src emacs-lisp

  ;; Completion Setup with Cape and Corfu
  (use-package cape
    :ensure t
    :init
    ;; Add useful defaults completion sources from Cape
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)

    :config
    ;; Enhance Clojure completion with Cape
    (with-eval-after-load 'clojure-mode
      (add-hook 'clojure-mode-hook
                (lambda ()
                  (add-to-list 'completion-at-point-functions #'cape-symbol)))))
#+end_src

* Corfu Configuration

#+begin_src emacs-lisp

  (use-package corfu
    :ensure t
    :custom
    (corfu-auto t)  ; Enable auto completion
    (corfu-auto-delay 0.2)
    (corfu-auto-prefix 2)
    (corfu-preview-current nil)
    (corfu-quit-at-boundary 'separator)

    :init
    (global-corfu-mode)

    :hook
    ((clojure-mode . corfu-mode)
     (cider-repl-mode . corfu-mode)))

  ;; Optional: Enable Corfu in the minibuffer
  (defun corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      (corfu-mode 1)))

  (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
#+end_src

* Which Key Configuration

#+begin_src emacs-lisp

  (use-package which-key
    :config
    (which-key-mode))
#+end_src

* do we need acewindow to navigate easily between windows 

* magit to start working with Git.

* Clojure support

#+begin_src emacs-lisp

    (use-package clojure-mode
      :ensure t)

    (use-package cider
      :ensure t
      :config
      (setq cider-repl-display-help-banner nil)
      (setq cider-print-fn 'puget)
      (setq cider-repl-use-pretty-printing t)
      (setq cider-clojure-cli-aliases ":dev:cider"))

    (use-package paredit
      :ensure t
      :hook ((clojure-mode . paredit-mode)
            (cider-repl-mode . paredit-mode)))

    (use-package rainbow-delimiters
      :ensure t
      :hook ((clojure-mode . rainbow-delimiters-mode)
            (cider-repl-mode . rainbow-delimiters-mode)))
#+end_src

* Cider REPL Configuration

#+begin_src emacs-lisp

  ;; Debugging Setup
  (setq cider-cljs-lein-repl
        "(do (require 'figwheel-sidecar.repl-api)
           (figwheel-sidecar.repl-api/start-figwheel!)
           (figwheel-sidecar.repl-api/cljs-repl))")

  (setq cider-debug-display-locals t)
  (setq cider-debug-prompt 'overlay)

  ;; Optional but Recommended Packages
  (use-package clj-refactor
    :ensure t
    :config
    (cljr-add-keybindings-with-prefix "C-c C-m")
    :hook (clojure-mode . clj-refactor-mode))

  (use-package flycheck-clj-kondo
    :ensure t)

  (use-package aggressive-indent
    :ensure t
    :hook (clojure-mode . aggressive-indent-mode))

  ;; Testing Setup  
  (setq cider-test-show-report-on-success t)
  (setq cider-auto-select-test-report-buffer t)


  ;; REPL Configuration
  (setq cider-repl-history-file ".cider-repl-history")
  (setq cider-repl-wrap-history t)
  (setq cider-repl-history-size 3000)
#+end_src

* treemacs configuration
#+begin_src emacs-lisp

  (use-package treemacs
    :ensure t
    :config
    (setq treemacs-follow-mode t)
    (setq treemacs-width 35)
    ;; project.el integration
    (treemacs-project-follow-mode t)
    ;; Modus theme integration
    (with-eval-after-load 'modus-themes
      (setq treemacs-directory-name-face 'modus-themes-completion-selected
            treemacs-file-name-face 'default
            treemacs-git-modified-face 'modus-themes-mark-alt
            treemacs-git-added-face 'modus-themes-mark-sel
            treemacs-git-untracked-face 'modus-themes-special-mild
            treemacs-git-conflict-face 'modus-themes-intense-red))
    
    ;; Additional customization for better modus integration
    (setq treemacs-indentation 2
          treemacs-indentation-string "  "
          treemacs-show-hidden-files t
          treemacs-collapse-dirs 3
          treemacs-width 35)
    
    ;; Use simple icons that work well with modus
    (setq treemacs-no-png-images t)
    
    ;; Optional: disable file size and modification time
    (treemacs-filewatch-mode t)
    (treemacs-git-mode 'simple)
    (setq treemacs-show-git-status t)
  	:bind
  	(:map global-map
    ("C-c t t" . treemacs)
    ("C-c t f" . treemacs-select-window)))

  (custom-set-faces
    '(treemacs-root-face ((t (:inherit modus-themes-completion-selected :height 1.2))))
    '(treemacs-directory-collapsed-face ((t (:inherit modus-themes-completion-match-0))))
    '(treemacs-tags-face ((t (:inherit modus-themes-key-binding))))
    '(treemacs-help-title-face ((t (:inherit modus-themes-bold))))
    )
    
#+end_src
* lsp mode and code completion using corfu

#+begin_src emacs-lisp

      (use-package lsp-mode
        :ensure t
        :init
        ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
        (setq lsp-keymap-prefix "C-c l")
        :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
      	 (clojure-mode . lsp)
      	 (clojurec-mode . lsp)
      	 (clojurescript-mode . lsp)
      	 ;; if you want which-key integration
      	 (lsp-mode . lsp-enable-which-key-integration))
        :commands ls)

      ;; (use-package treemacs
      ;;   :ensure t
      ;;   :config (
      ;; 	   (setq treemacs-no-png-images t)))

      (use-package lsp-ui
        :commands lsp-ui-mode)

      (use-package lsp-treemacs
        :commands lsp-treemacs-errors-list)

#+end_src

* debugging with dap-mode?

#+begin_src emacs-lisp

#+end_src
